# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
import datetime as dt
import time
from tkcalendar import Calendar

from Auth import auth_token
from geteData import get_data
from excelProcessor import excel_Processor

from emailService import sendEmailService

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Button, PhotoImage
import tkinter as tk


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\kelvin.g'yandi\Desktop\build\assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("580x506")
window.configure(bg="#FFFFFF")

sum = []
errordata = []
myList = []
statusData = "Not ready"
OCR_SUM = [0, 0, 0, 0, 0]
OCRs = ["OCR_STNK", "OCR_KTP", "OCR_NPWP", "OCR_BPKB", "OCR_KK"]
button_image_on = PhotoImage(file=relative_to_assets("button_6.png"))
button_image_off = PhotoImage(file=relative_to_assets("button_5.png"))
button_image_send_data = PhotoImage(file=relative_to_assets("button_4.png"))
button_image_get_data = PhotoImage(file=relative_to_assets("button_3.png"))
button_image_shwo_calendar_to = PhotoImage(file=relative_to_assets("button_2.png"))
button_image_show_calendar_from = PhotoImage(file=relative_to_assets("button_1.png"))

height_text_ocr = 0
height1_sum_ocr = 0

date_1 = str(dt.date.today())
date_2 = str(dt.date.today())


def show_calendar_From():
    def select_date():
        date = cal.selection_get()
        update_text1(date.strftime(" %Y-%m-%d"))
        frame_calendar_From.pack_forget()

    def cancel():
        frame_calendar_From.pack_forget()

    frame_calendar_From = tk.Frame(window)
    frame_calendar_From.pack(fill="both", expand=True)

    cal = Calendar(
        frame_calendar_From,
        selectmode="day",
        year=dt.datetime.now().year,
        month=dt.datetime.now().month,
        day=dt.datetime.now().day,
    )
    cal.pack(pady=20)

    button = tk.Button(
        frame_calendar_From,
        text="Select Date",
        command=select_date,
        bg="#00BFFF",
        fg="#FFFFFF",
        borderwidth=0,
        padx=10,
        pady=5,
        font=("Helvetica", 12),
        highlightthickness=0,
    )

    button_cancel = tk.Button(
        frame_calendar_From,
        text="Cancel",
        command=cancel,
        bg="#00BFFF",
        fg="#FFFFFF",
        borderwidth=0,
        padx=10,
        pady=5,
        font=("Helvetica", 12),
        highlightthickness=0,
    )

    button.pack(pady=10)
    button_cancel.pack(pady=10)


def show_calendar_To():
    def select_date():
        date = cal.selection_get()
        update_text2(date.strftime(" %Y-%m-%d"))
        frame_calendar_To.pack_forget()
        window.update()

    def cancel():
        frame_calendar_To.pack_forget()

    frame_calendar_To = tk.Frame(window)
    frame_calendar_To.pack(fill="both", expand=True)

    cal = Calendar(
        frame_calendar_To,
        selectmode="day",
        year=dt.datetime.now().year,
        month=dt.datetime.now().month,
        day=dt.datetime.now().day,
    )
    cal.pack(pady=20)
    button = tk.Button(
        frame_calendar_To,
        text="Select Date",
        command=select_date,
        bg="#00BFFF",
        fg="#FFFFFF",
        borderwidth=0,
        padx=10,
        pady=5,
        font=("Helvetica", 12),
        highlightthickness=0,
    )

    button_cancel = tk.Button(
        frame_calendar_To,
        text="Cancel",
        command=cancel,
        bg="#00BFFF",
        fg="#FFFFFF",
        borderwidth=0,
        padx=10,
        pady=5,
        font=("Helvetica", 12),
        highlightthickness=0,
    )

    button.pack(pady=10)
    button_cancel.pack(pady=10)


def update_text1(date):
    global date_1
    date_1 = str(date)
    canvas.itemconfigure(date_text_from, text="Date From :        " + date_1)


def update_text2(date):
    global date_2
    date_2 = str(date)
    canvas.itemconfigure(date_text_to, text="Date From :        " + date_2)


def get_data(dateFrom, dateTo):
    global statusData
    sum, errordata, statusData = excel_Processor(dateFrom, dateTo)
    if len(errordata) == 0:
        update_sum_data(sum)
        update_data_status(statusData)
    else:
        for val in errordata:
            if val != "":
                update_error_status(val)
            else:
                continue


def destroy_data_status(dataStatus):
    canvas.itemconfig(
        status_Data,
        text=dataStatus,
        fill="#00ff00" if dataStatus == "Ready" else "#FF0000",
    )


def destroy_sum_date(datas, dateFrom, dateTo):
    status = False

    for i, val in enumerate(datas):
        var_name = f"sum{i}"
        canvas.itemconfigure(globals()[var_name], text="a")
        if i == 4:
            status = True

    if status == True:
        get_data(dateFrom, dateTo)


def update_sum_data(sumdata):
    for i, val in enumerate(sumdata):
        var_name = f"sum{i}"
        canvas.itemconfigure(globals()[var_name], text=val)


def update_error_status(errorData):
    canvas.itemconfig(error_status, text=errorData)


def sendEmail(emailList):
    if len(emailList) != 0 and statusData == "Ready":
        sendEmailService(emailList, f"data penggunaan {date_1} / {date_2}")
        print("Data send")
    else:
        print("data is not ready or there some error")


def update_data_status(dataStatus):
    canvas.itemconfig(status_Data, text=dataStatus)


def toggle_image(button, value, text, i):
    print(i)
    if value[0] == 0:
        button["image"] = button_image_on
        value[0] = 1
        window.update()
    else:
        button["image"] = button_image_off
        value[0] = 0
        window.update()

    if text not in myList:
        myList.append(text)
        print(myList)
    else:
        myList.remove(text)
        print(myList)


canvas = Canvas(
    window,
    bg="#FFFFFF",
    height=506,
    width=503,
    bd=0,
    highlightthickness=0,
    relief="ridge",
)

canvas.place(x=0, y=0)


button_show_calendar_from = Button(
    image=button_image_show_calendar_from,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: show_calendar_To(),
    relief="flat",
)
button_show_calendar_from.place(x=28.0, y=120.0, width=216.0, height=41.0)

button_show_calendar_to = Button(
    image=button_image_shwo_calendar_to,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: show_calendar_From(),
    relief="flat",
)
button_show_calendar_to.place(x=28.0, y=51.0, width=216.0, height=41.0)

button_get_data = Button(
    image=button_image_get_data,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: get_data(date_1, date_2),
    relief="flat",
)
button_get_data.place(x=27.0, y=207.0, width=94.0, height=41.0)

button_send_data = Button(
    image=button_image_send_data,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: sendEmail(myList),
    relief="flat",
)
button_send_data.place(x=150.0, y=205.0, width=94.0, height=41.0)


for i, OCR in enumerate(OCRs):
    canvas.create_text(
        288.0,
        110.0 + height1_sum_ocr,
        anchor="nw",
        text=OCR + " :",
        fill="#000000",
        font=("Inter", 12 * -1),
    )

    height1_sum_ocr += 31

for i, SUM in enumerate(OCR_SUM):
    var_name = f"sum{i}"
    globals()[var_name] = canvas.create_text(
        468.0,
        110.0 + height_text_ocr,
        anchor="nw",
        text=SUM,
        fill="#000000",
        font=("Inter", 12 * -1),
    )

    height_text_ocr += 31


canvas.create_text(
    289.0,
    270.0,
    anchor="nw",
    text="Data Status   :                              ",
    font=("Inter", 12 * -1),
)

error_status = canvas.create_text(
    30.0,
    300.0,
    anchor="nw",
    text="Error status :   No error",
    font=("Inter", 12 * -1),
    width=200,
)


status_Data = canvas.create_text(
    420.0,
    270.0,
    anchor="nw",
    text=statusData,
    fill="#00ff00" if statusData == "Ready" else "#FF0000",
    font=("Inter", 12 * -1, "bold"),
    justify="right",
)

canvas.create_text(
    289.0,
    300.0,
    anchor="nw",
    text="Recepient list",
    fill="#000000",
    font=("Inter", 12 * -1),
)


date_label = tk.Label(window, text="Select a date:")

canvas.create_rectangle(267.5, 10.0, 267.5, 486.0, fill="#000000", outline="")

date_text_from = canvas.create_text(
    290.0,
    51.0,
    anchor="nw",
    text="Date From :         " + str(dt.date.today()),
    fill="#000000",
    font=("Inter", 12 * -1),
)

date_text_to = canvas.create_text(
    289.0,
    72.0,
    anchor="nw",
    text="Date To      :          " + str(dt.date.today()),
    fill="#000000",
    font=("Inter", 12 * -1),
)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~ Email 1 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

myEmails = [
    "kelvingyandi540@gmail.com",
    "JOSHUA",
    "WILLSKUY",
    "SAMURTAD",
    "DAVID",
    "KENSA",
]

button_images = [button_image_off, button_image_off, button_image_off]

space = 0

buttons_toggle = []

for i, myEmail in enumerate(myEmails):
    canvas.create_text(
        325.0,
        325.0 + space,
        anchor="nw",
        text=myEmail,
        fill="#000000",
        font=("Inter", 12 * -1),
    )
    # create a StringVar to hold the email
    var_name = f"variable{myEmail}"
    globals()[var_name] = Button(
        image=button_image_off,
        borderwidth=0,
        highlightthickness=0,
        command=lambda val=i, value=[0], text=myEmail: toggle_image(
            buttons_toggle[val], value, text, val
        ),
        relief="flat",
    )

    globals()[var_name].place(x=287.0, y=324.0 + space, width=29.0, height=16.0)
    space += 25
    buttons_toggle.append(globals()[var_name])

window.resizable(False, False)
window.mainloop()
